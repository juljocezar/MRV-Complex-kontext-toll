/**
 * @file This file contains the central type definitions and interfaces for the entire application.
 */

// --- Core Data Structures ---

/**
 * Represents a single uploaded document in the case.
 */
export interface Document {
  /** A unique hash identifier for the document. */
  id: string;
  /** The original filename of the document. */
  name: string;
  /** The full content of the document, either as text or a base64 string. */
  content: string;
  /** The text content if the file is a text-based format, otherwise null. */
  textContent: string | null;
  /** The base64 encoded content if the file is a binary format, otherwise null. */
  base64Content: string | null;
  /** The MIME type of the file (e.g., 'application/pdf'). */
  mimeType: string;
  /** An AI-generated summary of the document. */
  summary?: string;
  /** The current classification status of the document. */
  classificationStatus: 'unclassified' | 'classified' | 'error';
  /** The type of document, based on a classification standard like HURIDOCS. */
  workCategory?: string; // e.g., 'Victim Report', 'Witness Testimony'
  /** An array of tag names associated with the document. */
  tags: string[];
  /** An ISO 8601 timestamp of when the document was added. */
  createdAt: string;
}

/**
 * Represents a document generated by the application's AI.
 */
export interface GeneratedDocument {
  /** A unique identifier for the generated document. */
  id: string;
  /** The title of the generated document. */
  title: string;
  /** The raw (often Markdown) content of the document. */
  content: string;
  /** The HTML-rendered version of the content. */
  htmlContent?: string;
  /** An ISO 8601 timestamp of when the document was created. */
  createdAt: string;
  /** The name of the template used to generate the document, if any. */
  templateUsed?: string;
  /** An array of source document IDs used to generate the content. */
  sourceDocIds: string[];
}

/**
 * Represents a confirmed entity (person, organization, etc.) in the case.
 */
export interface CaseEntity {
  /** A unique identifier for the entity. */
  id: string;
  /** The name of the entity. */
  name: string;
  /** The type of the entity. */
  type: 'Person' | 'Organisation' | 'Standort' | 'Unbekannt';
  /** A brief description of the entity. */
  description: string;
  /** An array of relationships this entity has with other entities. */
  relationships?: EntityRelationship[];
}

/**
 * Defines a relationship between two entities.
 */
export interface EntityRelationship {
    /** The ID of the entity that is the target of the relationship. */
    targetEntityId: string;
    /** The name of the target entity. */
    targetEntityName: string;
    /** A description of the relationship (e.g., "is the lawyer of", "works for"). */
    description: string;
}

/**
 * Represents a single, curated piece of information extracted from a document.
 */
export interface KnowledgeItem {
  /** A unique identifier for the knowledge item. */
  id: string;
  /** The title of the knowledge item. */
  title: string;
  /** The content or summary of the knowledge item. */
  summary: string;
  /** The ID of the source document from which this item was extracted. */
  sourceDocId: string;
  /** An ISO 8601 timestamp of when the item was created. */
  createdAt: string;
  /** An array of tag names associated with the item. */
  tags: string[];
}

/**
 * Represents a single event in the case timeline.
 */
export interface TimelineEvent {
  /** A unique identifier for the event. */
  id: string;
  /** An ISO 8601 formatted date string for the event. */
  date: string;
  /** The title of the event. */
  title: string;
  /** A description of the event. */
  description: string;
  /** An array of document IDs related to this event. */
  documentIds: string[];
}

/**
 * Represents a single tag that can be applied to various items.
 */
export interface Tag {
  /** A unique identifier for the tag. */
  id: string;
  /** The name of the tag. */
  name:string;
}

/**
 * Represents a potential contradiction found between two documents.
 */
export interface Contradiction {
  /** A unique identifier for the contradiction. */
  id: string;
  /** The ID of the first source document. */
  source1DocId: string;
  /** The contradictory statement from the first document. */
  statement1: string;
  /** The ID of the second source document. */
  source2DocId: string;
  /** The contradictory statement from the second document. */
  statement2: string;
  /** An AI-generated explanation of why the statements are contradictory. */
  explanation: string;
}

/**
 * Represents a task or to-do item.
 */
export interface Task {
  /** A unique identifier for the task. */
  id: string;
  /** The title or description of the task. */
  title: string;
  /** The current status of the task. */
  status: 'todo' | 'in_progress' | 'done';
  /** An optional due date for the task in ISO 8601 format. */
  dueDate?: string;
}

/**
 * Represents a Key Performance Indicator (KPI) for tracking case progress.
 */
export interface KPI {
  /** A unique identifier for the KPI. */
  id: string;
  /** The name of the KPI. */
  name: string;
  /** The measurable target for the KPI. */
  target: string;
  /** The current progress towards the target, as a percentage (0-100). */
  progress: number;
}

/**
 * Represents a single high-level insight generated by the AI.
 */
export interface Insight {
    /** A unique identifier for the insight. */
    id: string;
    /** The text content of the insight. */
    text: string;
    /** The type of insight. */
    type: 'recommendation' | 'risk' | 'observation';
}

// --- Agent & Activity ---

/**
 * A type alias for the different capabilities an AI agent can have.
 */
export type AgentCapability =
  | 'document_analysis'
  | 'entity_extraction'
  | 'summarization'
  | 'document_classification'
  | 'case_analysis'
  | 'risk_assessment'
  | 'strategy_development'
  | 'insight_generation'
  | 'un_submission_assistance'
  | 'un_submission_finalization'
  | 'legal_analysis'
  | 'report_generation'
  | 'content_creation'
  | 'temporal_analysis'
  | 'event_sequencing'
  | 'kpi_suggestion'
  | 'workload_analysis'
  | 'cost_estimation'
  | 'ethics_analysis'
  | 'contradiction_detection'
  | 'template_based_extraction';

/**
 * Defines the profile for a specialized AI agent.
 */
export interface AgentProfile {
    /** The display name of the agent. */
    name: string;
    /** The designated role of the agent. */
    role: string;
    /** An emoji or icon representing the agent. */
    icon: string;
    /** A brief description of the agent's purpose. */
    description: string;
    /** The system prompt that defines the agent's behavior and personality. */
    systemPrompt: string;
    /** A list of capabilities the agent possesses. */
    capabilities: AgentCapability[];
}

/**
 * Represents a log entry for an action performed by an AI agent.
 */
export interface AgentActivity {
    /** A unique identifier for the activity log. */
    id: string;
    /** An ISO 8601 timestamp of the activity. */
    timestamp: string;
    /** The name of the agent that performed the action. */
    agentName: string;
    /** A description of the action performed. */
    action: string;
    /** The result of the action. */
    result: 'success' | 'error';
    /** Optional additional details about the action or its result. */
    details?: string;
}

/**
 * Represents a log entry for an action performed by the user.
 */
export interface AuditLogEntry {
    /** A unique identifier for the audit log entry. */
    id: string;
    /** An ISO 8601 timestamp of the action. */
    timestamp: string;
    /** A description of the user's action. */
    action: string;
    /** Additional details about the action. */
    details: string;
}

// --- Analysis Results ---

/**
 * A container for the various analysis results related to a single document.
 */
export interface DocumentAnalysisResult {
    /** The ID of the document that was analyzed. */
    docId: string;
    /** The AI-generated summary of the document. */
    summary?: string;
    /** An array of entities suggested from the document's content. */
    entities?: SuggestedEntity[];
    /** An array of timeline events suggested from the document's content. */
    timelineEvents?: Omit<TimelineEvent, 'id'>[];
    /** An estimated workload analysis for the document. */
    workloadEstimate?: WorkloadAnalysis;
    /** An estimated cost analysis for the document. */
    costEstimate?: CostAnalysis;
    /** The document's classification based on a standard like HURIDOCS. */
    classification?: string;
}

/**
 * A dictionary mapping document IDs to their analysis results.
 */
export interface DocumentAnalysisResults {
    [docId: string]: DocumentAnalysisResult | undefined;
}

/**
 * Defines the structure for a workload analysis.
 */
export interface WorkloadAnalysis {
    /** The total estimated hours for the task. */
    totalHours: number;
    /** The assessed complexity level. */
    complexity: 'low' | 'medium' | 'high';
    /** A breakdown of hours by sub-task. */
    breakdown: { task: string; hours: number }[];
}

/**
 * Defines the structure for a cost analysis.
 */
export interface CostAnalysis {
    /** The final recommended cost in EUR. */
    recommended: number;
    /** The minimum estimated cost in EUR. */
    min: number;
    /** The maximum estimated cost in EUR. */
    max: number;
    /** A detailed breakdown of the cost items. */
    details: { item: string; cost: number }[];
}

/**
 * Defines the structure for an ethics analysis report.
 */
export interface EthicsAnalysis {
    /** An assessment of potential bias in the case data. */
    biasAssessment: string;
    /** A list of identified privacy concerns. */
    privacyConcerns: string[];
    /** A list of actionable recommendations to mitigate ethical risks. */
    recommendations: string[];
}

/**
 * Defines the structure for a high-level summary of the entire case.
 */
export interface CaseSummary {
    /** The text of the overall summary. */
    summary: string;
    /** A list of key risks identified in the case. */
    identifiedRisks: { risk: string; description: string }[];
    /** A list of suggested next steps to advance the case. */
    suggestedNextSteps: { step: string; justification: string }[];
    /** An ISO 8601 timestamp of when the summary was generated. */
    generatedAt: string;
}

/**
 * Represents an entity suggested by the AI but not yet confirmed by the user.
 */
export interface SuggestedEntity {
    /** A temporary unique identifier for the suggestion. */
    id: string;
    /** The name of the suggested entity. */
    name: string;
    /** The suggested type of the entity. */
    type: 'Person' | 'Organisation' | 'Standort' | 'Unbekannt';
    /** The AI-generated description of the entity. */
    description: string;
    /** The ID of the document from which the entity was extracted. */
    sourceDocumentId: string;
    /** The name of the source document. */
    sourceDocumentName: string;
}


// --- State & Settings ---

/**
 * Contains the user-editable description of the case.
 * @deprecated This will be merged into `caseDetails` in a future version.
 */
export interface CaseContext {
    /** The main descriptive text for the case. */
    caseDescription: string;
}

/**
 * An object representing the set of active risks for the case.
 */
export interface Risks {
    physical: boolean;
    legal: boolean;
    digital: boolean;
    intimidation: boolean;
    evidenceManipulation: boolean;
    secondaryTrauma: boolean;
    burnout: boolean;
    psychologicalBurden: boolean;
}

/**
 * Defines the settings for the AI model.
 */
export interface AISettings {
    /** Controls the creativity of the AI's responses (0.0 to 1.0). */
    temperature: number;
    /** Controls the precision of the AI's word selection. */
    topP: number;
}

/**
 * Defines the hour thresholds for workload complexity assessment.
 */
export interface ComplexitySettings {
    /** The maximum hours for a "low" complexity task. */
    low: number;
    /** The maximum hours for a "medium" complexity task. */
    medium: number;
}

/**
 * A container for all application settings.
 */
export interface AppSettings {
    /** AI model settings. */
    ai: AISettings;
    /** Workload complexity settings. */
    complexity: ComplexitySettings;
}

/**
 * The main state object for the entire application.
 */
export interface AppState {
    activeTab: ActiveTab;
    documents: Document[];
    generatedDocuments: GeneratedDocument[];
    caseEntities: CaseEntity[];
    knowledgeItems: KnowledgeItem[];
    timelineEvents: TimelineEvent[];
    tags: Tag[];
    contradictions: Contradiction[];
    caseDetails: {
        description: string;
    };
    tasks: Task[];
    kpis: KPI[];
    risks: Risks;
    caseSummary: CaseSummary | null;
    insights: Insight[];
    agentActivity: AgentActivity[];
    auditLog: AuditLogEntry[];
    settings: AppSettings;
    ethicsAnalysis: EthicsAnalysis | null;
    documentAnalysisResults: DocumentAnalysisResults;
    mitigationStrategies: string;
    isFocusMode: boolean;
    isLoading: boolean;
    loadingSection: string;
    suggestedEntities: SuggestedEntity[];
    dispatchDocument: GeneratedDocument | null;
    checklist: ChecklistItem[];
    coverLetter: string;
}

// --- UI & Component Props ---

/**
 * A type alias for the valid IDs of the main navigation tabs.
 */
export type ActiveTab =
  | 'dashboard'
  | 'documents'
  | 'entities'
  | 'chronology'
  | 'knowledge'
  | 'graph'
  | 'analysis'
  | 'reports'
  | 'generation'
  | 'library'
  | 'dispatch'
  | 'strategy'
  | 'kpis'
  | 'un-submissions'
  | 'hrd-support'
  | 'legal-basis'
  | 'ethics'
  | 'contradictions'
  | 'agents'
  | 'audit'
  | 'settings';
  
/**
 * Represents a single message in the analysis chat modal.
 */
export interface AnalysisChatMessage {
  /** The role of the message sender. */
  role: 'user' | 'assistant';
  /** The text content of the message. */
  text: string;
}

/**
 * Represents a single item in a checklist.
 */
export interface ChecklistItem {
    /** A unique identifier for the checklist item. */
    id: string;
    /** The descriptive text for the checklist item. */
    text: string;
    /** Whether the item has been checked off. */
    checked: boolean;
}

// --- Misc ---

/**
 * Defines the parameters for a content creation request.
 */
export interface ContentCreationParams {
    /** The main instructions or prompt for the generation task. */
    instructions: string;
    /** The full case context to be provided to the AI. */
    caseContext: string;
    /** An optional array of source documents to use for generation. */
    sourceDocuments?: Document[];
    /** The raw content of a template, if one is used. */
    template?: string;
    /** The name of the template used, for metadata purposes. */
    templateName?: string;
}

/**
 * Represents the output of a content generation task.
 */
export interface GeneratedContent {
    /** The raw (often Markdown) content generated by the AI. */
    content: string;
    /** The HTML-rendered version of the content. */
    htmlContent: string;
    /** A flexible object for storing metadata about the generation process. */
    metadata: { [key: string]: any };
}

/**
 * Represents the result of a temporal analysis.
 * The properties are in German as per the original schema definition.
 */
export interface TemporalAnalysisResult {
    zeitlicher_rahmen: object;
    chronologie: object[];
    zeitliche_cluster: object[];
    muster: object[];
    kausale_ketten: object[];
    zeitliche_anomalien: object[];
}

/** @deprecated Use `CaseEntity` instead. */
export type Entity = any;
/** @deprecated This type is unused. */
export type DocEntity = any;
/** @deprecated This type is unused. */
export type KnowledgeTag = any;
